# This file uses hard-coded URLs because the http-test extension is not resolving variables.

### Get all categories
GET http://localhost:61571/api/categories

### Get all active events
GET http://localhost:61571/api/events

### Create a new event
# The following request creates an event with a 'photos' property.
POST http://localhost:61571/api/events
Content-Type: application/json

{
  "title": "New Test Event with Photo",
  "description": "This is a test event created from the .http file.",
  "address": "123 Test St",
  "latitude": 40.7128,
  "longitude": -74.0060,
  "start_datetime": "2025-12-01T10:00:00Z",
  "end_datetime": "2025-12-01T18:00:00Z",
  "item_categories": [6, 8],
  "photos": ["https://example.com/photo.jpg"]
}

### Create a new event (without a photo)
# The server will automatically assign a random photo from https://picsum.photos/
POST http://localhost:61571/api/events
Content-Type: application/json

{
  "title": "New Test Event without Photo",
  "description": "This is a test event created from the .http file.",
  "address": "456 Test Ave",
  "latitude": 40.7128,
  "longitude": -74.0060,
  "start_datetime": "2025-12-02T10:00:00Z",
  "end_datetime": "2025-12-02T18:00:00Z",
  "item_categories": [9, 10]
}

### (ADMIN) Get event for editing - uses the secret 'guid'
GET http://localhost:61571/api/events/edit/1b1b1b1b-1b1b-1b1b-1b1b-1b1b1b1b1b1b

### (ADMIN) Update an event - uses the secret 'guid'
PUT http://localhost:61571/api/events/edit/1b1b1b1b-1b1b-1b1b-1b1b-1b1b1b1b1b1b
Content-Type: application/json

{
  "title": "Updated Test Event"
}

### (ADMIN) Soft delete an event - uses the secret 'guid'
DELETE http://localhost:61571/api/events/edit/1b1b1b1b-1b1b-1b1b-1b1b-1b1b1b1b1b1b

### (ADMIN) Undelete an event - uses the secret 'guid'
POST http://localhost:61571/api/events/edit/1b1b1b1b-1b1b-1b1b-1b1b-1b1b1b1b1b1b/undelete

### (ADMIN) Add a photo to an event
# NOTE: File uploads with multipart/form-data are not easily testable in a standard .http file.
# Use a tool like curl or Postman to test this endpoint.
#
# Example curl command:
# curl -X POST -F "eventImage=@/path/to/your/image.jpg" http://localhost:61571/api/events/edit/1b1b1b1b-1b1b-1b1b-1b1b-1b1b1b1b1b1b/photos
#
POST http://localhost:61571/api/events/edit/1b1b1b1b-1b1b-1b1b-1b1b-1b1b1b1b1b1b/photos
Content-Type: multipart/form-data; boundary=---boundary

---boundary
Content-Disposition: form-data; name="eventImage"; filename="example.jpg"
Content-Type: image/jpeg

< /path/to/your/example.jpg
---boundary--

### (PUBLIC) Get a single event by ID - uses the public 'id'
GET http://localhost:61571/api/events/1a1a1a1a-1a1a-1a1a-1a1a-1a1a1a1a1a1a

### (PUBLIC) Flag an event as ended - uses the public 'id'
POST http://localhost:61571/api/events/1a1a1a1a-1a1a-1a1a-1a1a-1a1a1a1a1a1a/flag-ended

### (PUBLIC) Add a rating to an event
POST http://localhost:61571/api/events/1a1a1a1a-1a1a-1a1a-1a1a-1a1a1a1a1a1a/ratings
Content-Type: application/json

{
  "rating": 5
}

### (PUBLIC) Add a comment to an event
POST http://localhost:61571/api/events/1a1a1a1a-1a1a-1a1a-1a1a-1a1a1a1a1a1a/comments
Content-Type: application/json

{
  "comment": "This was a great event!"
}
